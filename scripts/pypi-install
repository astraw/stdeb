#!/usr/bin/env python
import sys, os, shutil
import subprocess
from optparse import OptionParser
from stdeb.downloader import myprint, get_source_tarball
import tempfile

def main():
    if os.geteuid() != 0:
        myprint('%s must be run as root'%os.path.basename(sys.argv[0]),fd=sys.stderr)
        sys.exit(1)

    usage = '%prog PACKAGE_NAME [options]'
    parser = OptionParser(usage)
    parser.add_option('--verbose', type='int',
                      help='verbosity level',
                      default=0)
    parser.add_option('--keep', action='store_true',
                      default=False,
                      help='do not remove temporary files')
    (options, args) = parser.parse_args()
    if len(args) != 1:
        myprint('need exactly one PACKAGE_NAME',fd=sys.stderr)
        parser.print_help()
        sys.exit(1)

    package_name = args[0]

    orig_dir = os.path.abspath( os.curdir )
    tmpdir = os.path.abspath(tempfile.mkdtemp())
    try:
        if options.verbose >= 2:
            myprint('downloading to %s'%tmpdir)
        os.chdir( tmpdir )
        tarball_fname = get_source_tarball(package_name,verbose=options.verbose)
        cmd = 'tar xzf %s' % tarball_fname
        if options.verbose >= 2:
            myprint('executing: %s'%cmd)
        subprocess.check_call(cmd, shell=True)

        expanded_dir = None
        for entry in os.listdir(os.curdir):
            if os.path.isdir(entry):
                assert expanded_dir is None, "only expected one directory"
                expanded_dir = entry

        os.chdir( expanded_dir )
        cmd = ('%s setup.py --command-packages=stdeb.command sdist_dsc '
               '--guess-conflicts-provides-replaces=True bdist_deb' %
               (sys.executable, ) )
        if options.verbose >= 2:
            myprint('executing: %s'%cmd)
        subprocess.check_call(cmd, shell=True)

        os.chdir( 'deb_dist' )
        cmd = 'dpkg -i *.deb'
        if options.verbose >= 2:
            myprint('executing: %s'%cmd)
        subprocess.check_call(cmd, shell=True)

    finally:
        os.chdir( orig_dir )
        if not options.keep:
            shutil.rmtree(tmpdir)

if __name__=='__main__':
    main()
